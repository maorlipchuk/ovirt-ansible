# TODO: Check what happens when we force remove unattached storage domain (probably should add a default empty GUID as a data center
# Answer: When we force remove an unattached storage domain, ansible tries to move it to maintenance and detach it first, although it might be that this storage domain is already detached and has no related data center, therefor the move to maintenance will fail

# We set an initial value for sp_uuid since this task is being called
# multiple times from the main task and sp_uuid is stateful.
- name: Set default boolean value for sp_uuid
  set_fact: sp_uuid=True

- name: Detached storage domain - Set sp_uuid with empty GUID
  set_fact: sp_uuid="00000000-0000-0000-0000-000000000000"
  when: storage.data_centers is not defined

- name: Detached storage domain - Fetch active host for remove
  ovirt_hosts_facts:
    pattern: "status=up"
    auth: "{{ ovirt_auth }}"
  when: storage.data_centers is not defined

- name: Attached storage domain - Fetch active host for remove
  ovirt_hosts_facts:
    pattern: "status=up and storage={{ storage.name }}"
    auth: "{{ ovirt_auth }}"
  when: storage.data_centers is defined

# If sp_uuid is still initiated with the default boolean value,
# that means that there is a data center which the storage domain is attached to it.
- name: Attached storage domain - Set sp_uuid
  set_fact: sp_uuid="{{ storage.data_centers[0].id }}"
  when: sp_uuid

- name: Remove storage domain with no force
  include_tasks: ../tasks/remove_domain.yml host={{ ovirt_hosts[0].id }}
  when: "ovirt_hosts is defined and ovirt_hosts|length > 0 and not force"

- name: Force remove storage domain
  include_tasks: ../tasks/remove_domain.yml host="00000000-0000-0000-0000-000000000000"
  #storage={{ storage }} host={{ ovirt_hosts[0] }} sp_uuid=sp_uuid
  when: "force"

